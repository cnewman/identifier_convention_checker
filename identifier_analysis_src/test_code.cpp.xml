<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="../tests/code_artifacts/code_containing_identifiers_to_test.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>function_with_mixed_heuristics</name><parameter_list>()</parameter_list><block>{<block_content>
	<comment type="line">//first some tests for heuristics</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>token_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tokenMax_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>Token</name></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>function_with_consistent_underscore_heuristics</name><parameter_list>()</parameter_list><block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>token_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>token_max</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>functionWithConsistentCamelCaseHeuristics</name><parameter_list>()</parameter_list><block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>tokenCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tokenMax</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>token</name></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionWithSingularPluralIssues</name><parameter_list>()</parameter_list><block>{<block_content>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>name</name></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>functionWithDictionaryTermIssues</name><parameter_list>()</parameter_list><block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>tkn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nme</name></decl>;</decl_stmt>
</block_content>}</block></function></unit>
